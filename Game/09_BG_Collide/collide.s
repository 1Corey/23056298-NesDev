;
; File generated by cc65 v 2.19 - Git 02470a2
;
	.fopt		compiler,"cc65 v 2.19 - Git 02470a2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_get_pad_new
	.import		_set_scroll_y
	.export		_YellowSpr
	.export		_BlueSpr
	.export		_Missile
	.export		_EnemyMissile
	.export		_Enemy
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_c_map
	.export		_BoxGuy1
	.export		_c2
	.export		_All_Collision_Maps
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_bg
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_check_start
	.export		_background
	.export		_frame_count
	.export		_enemy_direction
	.export		_missile_x
	.export		_missile_y
	.export		_missile_active
	.export		_enemies
	.export		_spawn_enemy_wave
	.export		_enemyMissiles
	.export		_fire_enemy_missile
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.byte	$40
	.byte	$50
	.byte	$0f
	.byte	$0e
_frame_count:
	.byte	$00
_enemy_direction:
	.byte	$01
_missile_active:
	.byte	$00

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$40
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_Missile:
	.byte	$fc
	.byte	$f8
	.byte	$0b
	.byte	$00
	.byte	$80
_EnemyMissile:
	.byte	$fc
	.byte	$f8
	.byte	$0b
	.byte	$00
	.byte	$80
_Enemy:
	.byte	$f8
	.byte	$f8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$f8
	.byte	$01
	.byte	$40
	.byte	$f8
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$c0
	.byte	$80
_c2:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_All_Collision_Maps:
	.addr	_c2
_palette_bg:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_background:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_missile_x:
	.res	1,$00
_missile_y:
	.res	1,$00
_enemies:
	.res	15,$00
_enemyMissiles:
	.res	12,$00

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; p_maps = All_Collision_Maps[which_bg];
;
	ldx     #$00
	lda     _which_bg
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy (c_map, p_maps, 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(background, 1024);
;
	lda     #<(_background)
	ldx     #>(_background)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
	lda     #$00
	sta     _temp_y
L001A:	lda     _temp_y
	cmp     #$0F
	bcs     L0003
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	lda     #$00
	sta     _temp_x
L001B:	lda     _temp_x
	cmp     #$10
	bcs     L001E
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1]){
;
	ldy     _temp1
	lda     _c_map,y
	beq     L001D
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else{
;
	jmp     L0017
;
; vram_put(0); // blank
;
L001D:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L0017:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	inc     _temp_x
	jmp     L001B
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
L001E:	lda     #$00
	sta     _temp_x
L001F:	lda     _temp_x
	cmp     #$10
	bcs     L0022
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1]){
;
	ldy     _temp1
	lda     _c_map,y
	beq     L0021
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else{
;
	jmp     L0018
;
; vram_put(0); // blank
;
L0021:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L0018:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	inc     _temp_x
	jmp     L001F
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
L0022:	inc     _temp_y
	jmp     L001A
;
; ppu_on_all(); // turn on screen
;
L0003:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear(); // clear sprite memory each frame
;
	jsr     decsp1
	jsr     _oam_clear
;
; oam_meta_spr(BoxGuy1.X, BoxGuy1.Y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; if (missile_y != YOFFSCREEN) {
;
	lda     _missile_y
	cmp     #$F0
	beq     L000F
;
; oam_meta_spr(missile_x, missile_y, Missile);
;
	jsr     decsp2
	lda     _missile_x
	ldy     #$01
	sta     (sp),y
	lda     _missile_y
	dey
	sta     (sp),y
	lda     #<(_Missile)
	ldx     #>(_Missile)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L000F:	lda     #$00
	tay
L000D:	sta     (sp),y
	cmp     #$05
	bcs     L0010
;
; if (enemies[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0005
;
; oam_meta_spr(enemies[i].x, enemies[i].y, Enemy);
;
	jsr     decsp2
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_Enemy)
	ldx     #>(_Enemy)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0005:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000D
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0010:	tya
L000E:	sta     (sp),y
	cmp     #$04
	bcs     L0009
;
; if (enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L000A
;
; oam_meta_spr(enemyMissiles[i].x, enemyMissiles[i].y, EnemyMissile);
;
	jsr     decsp2
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #<(_enemyMissiles)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_EnemyMissile)
	ldx     #>(_EnemyMissile)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L000A:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000E
;
; }
;
L0009:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L0008
;
; BoxGuy1.X -= 1;
;
	dec     _BoxGuy1
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0004
L0008:	lda     _pad1
	and     #$01
	beq     L0004
;
; BoxGuy1.X += 1;
;
	inc     _BoxGuy1
;
; bg_collision();
;
L0004:	jsr     _bg_collision
;
; if(collision_R) BoxGuy1.X -= 1;  // If collision on the right, move left
;
	lda     _collision_R
	beq     L0005
	dec     _BoxGuy1
;
; if(collision_L) BoxGuy1.X += 1;  // If collision on the left, move right
;
L0005:	lda     _collision_L
	beq     L0006
	inc     _BoxGuy1
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
	lda     _BoxGuy1
	sta     _temp_x
;
; temp_y = BoxGuy1.Y; // top side
;
	lda     _BoxGuy1+1
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	cmp     #$F0
	bcc     L0015
;
; }
;
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
L0015:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0012
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_x = BoxGuy1.X + BoxGuy1.width; // right side
;
L0012:	lda     _BoxGuy1
	clc
	adc     _BoxGuy1+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0013
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_y = BoxGuy1.Y + BoxGuy1.height; // bottom side
;
L0013:	lda     _BoxGuy1+1
	clc
	adc     _BoxGuy1+3
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	cmp     #$F0
	bcs     L000A
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0014
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
L0014:	lda     _BoxGuy1
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_start: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_enemy_wave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_enemy_wave: near

.segment	"CODE"

;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	jsr     decsp1
	lda     #$00
	tay
L0007:	sta     (sp),y
	cmp     #$05
	bcs     L0003
;
; enemies[i].x = 40 + (i * 30); // spread out horizontally
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	tay
	txa
	adc     #>(_enemies)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$1E
	jsr     tosumula0
	clc
	adc     #$28
	ldy     #$00
	jsr     staspidx
;
; enemies[i].y = 40; // all at the same height
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$28
	ldy     #$01
	sta     (ptr1),y
;
; enemies[i].active = 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	ldy     #$00
	clc
	adc     (sp),y
	jmp     L0007
;
; }
;
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fire_enemy_missile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_enemy_missile: near

.segment	"CODE"

;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
L000E:	sta     (sp),y
	cmp     #$04
	jcs     L0003
;
; if (!enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	jne     L0004
;
; for (e = 0; e < MAX_ENEMIES; ++e) {
;
	tay
L000D:	sta     (sp),y
	cmp     #$05
	jcs     L0004
;
; if (enemies[e].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0009
;
; enemyMissiles[i].x = enemies[e].x;
;
	dey
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     sreg
	txa
	adc     #>(_enemyMissiles)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; enemyMissiles[i].y = enemies[e].y + 8;
;
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     sreg
	txa
	adc     #>(_enemyMissiles)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$08
	sta     (sreg),y
;
; enemyMissiles[i].active = 1;
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; return;
;
	jmp     incsp2
;
; for (e = 0; e < MAX_ENEMIES; ++e) {
;
L0009:	tay
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000D
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0004:	ldy     #$01
	clc
	tya
	adc     (sp),y
	jmp     L000E
;
; }
;
L0003:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; BoxGuy1.X = 110; //player spawns in the middle of the bottom of the screen
;
	lda     #$6E
	sta     _BoxGuy1
;
; BoxGuy1.Y = 200;
;
	lda     #$C8
	sta     _BoxGuy1+1
;
; draw_bg();
;
	jsr     _draw_bg
;
; spawn_enemy_wave();
;
	jsr     _spawn_enemy_wave
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0002:	jsr     decsp1
	jsr     _ppu_wait_nmi
;
; frame_count++;  // you can add this global to track time
;
	inc     _frame_count
;
; if (frame_count >= 60) {
;
	lda     _frame_count
	cmp     #$3C
	lda     #$00
	bcc     L0023
;
; fire_enemy_missile();
;
	jsr     _fire_enemy_missile
;
; frame_count = 0;
;
	lda     #$00
	sta     _frame_count
;
; pad1 = pad_poll(0); // read the first controller
;
L0023:	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if ((pad1 & PAD_A) && missile_y == YOFFSCREEN) {
;
	lda     _pad1
	and     #$80
	beq     L0006
	lda     _missile_y
	cmp     #$F0
	bne     L0006
;
; missile_x = BoxGuy1.X + 7;
;
	lda     _BoxGuy1
	clc
	adc     #$07
	sta     _missile_x
;
; missile_y = BoxGuy1.Y - 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$08
	sta     _missile_y
;
; movement();
;
L0006:	jsr     _movement
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	tay
L0021:	sta     (sp),y
	cmp     #$05
	jcs     L002A
;
; if (enemies[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0012
;
; if (enemy_direction) {
;
	lda     _enemy_direction
	beq     L0011
;
; enemies[i].x += 1;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
;
; else {
;
	jmp     L001E
;
; enemies[i].x -= 1;
;
L0011:	tay
	tax
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
L001E:	sta     (ptr1),y
;
; if (enemies[i].x >= 240) {
;
L0012:	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	cmp     #$F0
	bcc     L0013
;
; enemy_direction = 0;
;
	lda     #$00
;
; else if (enemies[i].x <= 32) {
;
	jmp     L001F
L0013:	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	cmp     #$21
	bcs     L0027
;
; enemy_direction = 1;
;
	lda     #$01
L001F:	sta     _enemy_direction
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0027:	lda     #$00
	tay
L0020:	sta     (sp),y
	cmp     #$04
	bcs     L0029
;
; if (enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0018
;
; enemyMissiles[i].y += 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (enemyMissiles[i].y > 240) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$F1
	bcc     L0018
;
; enemyMissiles[i].active = 0; // turn off if offscreen
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0018:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0020
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0029:	clc
	lda     #$01
	adc     (sp),y
	jmp     L0021
;
; if (missile_y != YOFFSCREEN) {
;
L002A:	lda     _missile_y
	cmp     #$F0
	beq     L001D
;
; missile_y += MISSILE_SPEED;  // move up
;
	lda     #$FC
	clc
	adc     _missile_y
	sta     _missile_y
;
; if (missile_y < 8) missile_y = YOFFSCREEN;  // if off screen, deactivate
;
	cmp     #$08
	bcs     L001D
	lda     #$F0
	sta     _missile_y
;
; draw_sprites();
;
L001D:	jsr     _draw_sprites
;
; check_start();
;
	jsr     _check_start
;
; }
;
	jsr     incsp1
;
; while (1){
;
	jmp     L0002

.endproc

