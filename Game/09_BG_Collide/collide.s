;
; File generated by cc65 v 2.19 - Git 02470a2
;
	.fopt		compiler,"cc65 v 2.19 - Git 02470a2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_get_pad_new
	.import		_set_scroll_y
	.export		_YellowSpr
	.export		_BlueSpr
	.export		_Missile
	.export		_EnemyMissile
	.export		_Enemy
	.export		_ExplosionSprite
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_c_map
	.export		_BoxGuy1
	.export		_c2
	.export		_All_Collision_Maps
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_explosion
	.export		_draw_bg
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision
	.export		_check_start
	.export		_background
	.import		_rand
	.export		_frame_count
	.export		_enemy_direction
	.export		_missile_x
	.export		_missile_y
	.export		_missile_active
	.export		_enemies
	.export		_spawn_enemy_wave
	.export		_enemyMissiles
	.export		_effect_x
	.export		_effect_y
	.export		_effect_timer
	.export		_player_alive
	.export		_fire_enemy_missile
	.export		_reset_game
	.export		_draw_game_over
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.byte	$40
	.byte	$50
	.byte	$0f
	.byte	$0e
_frame_count:
	.byte	$00
_enemy_direction:
	.byte	$01
_missile_active:
	.byte	$00
_effect_x:
	.byte	$00
_effect_y:
	.byte	$00
_effect_timer:
	.byte	$00
_player_alive:
	.byte	$01

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$40
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_Missile:
	.byte	$fc
	.byte	$f8
	.byte	$0b
	.byte	$00
	.byte	$80
_EnemyMissile:
	.byte	$fc
	.byte	$f8
	.byte	$0b
	.byte	$00
	.byte	$80
_Enemy:
	.byte	$f8
	.byte	$f8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$f8
	.byte	$01
	.byte	$40
	.byte	$f8
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$c0
	.byte	$80
_ExplosionSprite:
	.byte	$f8
	.byte	$f8
	.byte	$0c
	.byte	$00
	.byte	$00
	.byte	$f8
	.byte	$0d
	.byte	$00
	.byte	$f8
	.byte	$00
	.byte	$1c
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1d
	.byte	$00
	.byte	$80
_c2:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_All_Collision_Maps:
	.addr	_c2
_palette_bg:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0f
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0f
	.byte	$0f
	.byte	$0f
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_explosion:
	.byte	$0f
	.byte	$06
	.byte	$30
	.byte	$3f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_background:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2f
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2e
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2d
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_missile_x:
	.res	1,$00
_missile_y:
	.res	1,$00
_enemies:
	.res	20,$00
_enemyMissiles:
	.res	12,$00

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; p_maps = All_Collision_Maps[which_bg];
;
	ldx     #$00
	lda     _which_bg
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy (c_map, p_maps, 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(background, 1024);
;
	lda     #<(_background)
	ldx     #>(_background)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
	lda     #$00
	sta     _temp_y
L001A:	lda     _temp_y
	cmp     #$0F
	bcs     L0003
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	lda     #$00
	sta     _temp_x
L001B:	lda     _temp_x
	cmp     #$10
	bcs     L001E
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1]){
;
	ldy     _temp1
	lda     _c_map,y
	beq     L001D
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else{
;
	jmp     L0017
;
; vram_put(0); // blank
;
L001D:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L0017:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	inc     _temp_x
	jmp     L001B
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
L001E:	lda     #$00
	sta     _temp_x
L001F:	lda     _temp_x
	cmp     #$10
	bcs     L0022
;
; temp1 = (temp_y << 4) + temp_x;
;
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1]){
;
	ldy     _temp1
	lda     _c_map,y
	beq     L0021
;
; vram_put(0x10); // wall
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x10);
;
	lda     #$10
;
; else{
;
	jmp     L0018
;
; vram_put(0); // blank
;
L0021:	jsr     _vram_put
;
; vram_put(0);
;
	lda     #$00
L0018:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	inc     _temp_x
	jmp     L001F
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
L0022:	inc     _temp_y
	jmp     L001A
;
; ppu_on_all(); // turn on screen
;
L0003:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear(); // clear sprite memory each frame
;
	jsr     decsp1
	jsr     _oam_clear
;
; oam_meta_spr(BoxGuy1.X, BoxGuy1.Y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; if (missile_y != YOFFSCREEN) {
;
	lda     _missile_y
	cmp     #$F0
	beq     L0015
;
; oam_meta_spr(missile_x, missile_y, Missile);
;
	jsr     decsp2
	lda     _missile_x
	ldy     #$01
	sta     (sp),y
	lda     _missile_y
	dey
	sta     (sp),y
	lda     #<(_Missile)
	ldx     #>(_Missile)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0015:	lda     #$00
	tay
L0013:	sta     (sp),y
	cmp     #$05
	bcs     L0016
;
; if (enemies[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0005
;
; oam_meta_spr(enemies[i].x, enemies[i].y, Enemy);
;
	jsr     decsp2
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_Enemy)
	ldx     #>(_Enemy)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0005:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0013
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0016:	tya
L0014:	sta     (sp),y
	cmp     #$04
	bcs     L0017
;
; if (enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L000A
;
; oam_meta_spr(enemyMissiles[i].x, enemyMissiles[i].y, EnemyMissile);
;
	jsr     decsp2
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #<(_enemyMissiles)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_EnemyMissile)
	ldx     #>(_EnemyMissile)
	jsr     _oam_meta_spr
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L000A:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0014
;
; if (effect_timer > 0) {
;
L0017:	lda     _effect_timer
	beq     L000D
;
; oam_meta_spr(effect_x, effect_y, ExplosionSprite);
;
	jsr     decsp2
	lda     _effect_x
	iny
	sta     (sp),y
	lda     _effect_y
	dey
	sta     (sp),y
	lda     #<(_ExplosionSprite)
	ldx     #>(_ExplosionSprite)
	jsr     _oam_meta_spr
;
; if (player_alive) {
;
L000D:	lda     _player_alive
	beq     L000E
;
; oam_meta_spr(BoxGuy1.X, BoxGuy1.Y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; if (!player_alive && effect_timer > 0) {
;
L000E:	lda     _player_alive
	bne     L000F
	lda     _effect_timer
	beq     L000F
;
; oam_meta_spr(effect_x, effect_y, ExplosionSprite);  // Draw explosion at player's position
;
	jsr     decsp2
	lda     _effect_x
	ldy     #$01
	sta     (sp),y
	lda     _effect_y
	dey
	sta     (sp),y
	lda     #<(_ExplosionSprite)
	ldx     #>(_ExplosionSprite)
	jsr     _oam_meta_spr
;
; }
;
L000F:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L0008
;
; BoxGuy1.X -= 1;
;
	dec     _BoxGuy1
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0004
L0008:	lda     _pad1
	and     #$01
	beq     L0004
;
; BoxGuy1.X += 1;
;
	inc     _BoxGuy1
;
; bg_collision();
;
L0004:	jsr     _bg_collision
;
; if(collision_R) BoxGuy1.X -= 1;  // If collision on the right, move left
;
	lda     _collision_R
	beq     L0005
	dec     _BoxGuy1
;
; if(collision_L) BoxGuy1.X += 1;  // If collision on the left, move right
;
L0005:	lda     _collision_L
	beq     L0006
	inc     _BoxGuy1
;
; }
;
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
	lda     _BoxGuy1
	sta     _temp_x
;
; temp_y = BoxGuy1.Y; // top side
;
	lda     _BoxGuy1+1
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	cmp     #$F0
	bcc     L0015
;
; }
;
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
L0015:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0012
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_x = BoxGuy1.X + BoxGuy1.width; // right side
;
L0012:	lda     _BoxGuy1
	clc
	adc     _BoxGuy1+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0013
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp_y = BoxGuy1.Y + BoxGuy1.height; // bottom side
;
L0013:	lda     _BoxGuy1+1
	clc
	adc     _BoxGuy1+3
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	cmp     #$F0
	bcs     L000A
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0014
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp_x = BoxGuy1.X; // left side
;
L0014:	lda     _BoxGuy1
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_start: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_enemy_wave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_enemy_wave: near

.segment	"CODE"

;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	jsr     decsp1
	lda     #$00
	tay
L0007:	sta     (sp),y
	cmp     #$05
	bcs     L0003
;
; enemies[i].x = 40 + (i * 30); // spread out horizontally
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	tay
	txa
	adc     #>(_enemies)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$1E
	jsr     tosumula0
	clc
	adc     #$28
	ldy     #$00
	jsr     staspidx
;
; enemies[i].y = 40; // all at the same height
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$28
	ldy     #$01
	sta     (ptr1),y
;
; enemies[i].active = 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; enemies[i].direction = 1; // initially move right
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$01
	iny
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	ldy     #$00
	clc
	adc     (sp),y
	jmp     L0007
;
; }
;
L0003:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fire_enemy_missile (unsigned char enemy_index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_enemy_missile: near

.segment	"CODE"

;
; void fire_enemy_missile(unsigned char enemy_index) {
;
	jsr     pusha
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
	jsr     decsp1
	lda     #$00
	tay
L0008:	sta     (sp),y
	cmp     #$04
	jcs     L0003
;
; if (!enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	bne     L0004
;
; enemyMissiles[i].x = enemies[enemy_index].x;
;
	tax
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     sreg
	txa
	adc     #>(_enemyMissiles)
	sta     sreg+1
	ldx     #$00
	dey
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; enemyMissiles[i].y = enemies[enemy_index].y + 8; // missile starts just below enemy
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     sreg
	txa
	adc     #>(_enemyMissiles)
	sta     sreg+1
	ldx     #$00
	iny
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$08
	sta     (sreg),y
;
; enemyMissiles[i].active = 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; return;
;
	jmp     incsp2
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0004:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0008
;
; }
;
L0003:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ reset_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_game: near

.segment	"CODE"

;
; BoxGuy1.X = 110;
;
	jsr     decsp1
	lda     #$6E
	sta     _BoxGuy1
;
; BoxGuy1.Y = 200;
;
	lda     #$C8
	sta     _BoxGuy1+1
;
; missile_y = YOFFSCREEN;
;
	lda     #$F0
	sta     _missile_y
;
; missile_active = 0;
;
	lda     #$00
	sta     _missile_active
;
; player_alive = 1;
;
	lda     #$01
	sta     _player_alive
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	tay
L000B:	sta     (sp),y
	cmp     #$05
	bcs     L000D
;
; enemies[i].x = 40 + (i * 30);
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	tay
	txa
	adc     #>(_enemies)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$1E
	jsr     tosumula0
	clc
	adc     #$28
	ldy     #$00
	jsr     staspidx
;
; enemies[i].y = 40;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$28
	ldy     #$01
	sta     (ptr1),y
;
; enemies[i].active = 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	ldy     #$00
	clc
	adc     (sp),y
	jmp     L000B
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L000D:	tya
L000C:	sta     (sp),y
	cmp     #$04
	bcs     L0008
;
; enemyMissiles[i].active = 0;
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	tya
	ldy     #$02
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
	tay
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000C
;
; draw_bg();
;
L0008:	jsr     _draw_bg
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_over: near

.segment	"CODE"

;
; ppu_off();  // turn screen off for safe drawing
;
	jsr     _ppu_off
;
; vram_adr(NTADR_A(12, 14));
;
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_put(0x0A); // G
;
	lda     #$0A
	jsr     _vram_put
;
; vram_put(0x04); // A
;
	lda     #$04
	jsr     _vram_put
;
; vram_put(0x10); // M
;
	lda     #$10
	jsr     _vram_put
;
; vram_put(0x08); // E
;
	lda     #$08
	jsr     _vram_put
;
; vram_put(0x00); // Space
;
	lda     #$00
	jsr     _vram_put
;
; vram_put(0x12); // O
;
	lda     #$12
	jsr     _vram_put
;
; vram_put(0x19); // V
;
	lda     #$19
	jsr     _vram_put
;
; vram_put(0x08); // E
;
	lda     #$08
	jsr     _vram_put
;
; vram_put(0x15); // R
;
	lda     #$15
	jsr     _vram_put
;
; vram_put(0x28); // !
;
	lda     #$28
	jsr     _vram_put
;
; vram_adr(NTADR_A(11, 16));
;
	ldx     #$22
	lda     #$0B
	jsr     _vram_adr
;
; vram_put(0x13); // P
;
	lda     #$13
	jsr     _vram_put
;
; vram_put(0x15); // R
;
	lda     #$15
	jsr     _vram_put
;
; vram_put(0x08); // E
;
	lda     #$08
	jsr     _vram_put
;
; vram_put(0x16); // S
;
	lda     #$16
	jsr     _vram_put
;
; vram_put(0x16); // S
;
	lda     #$16
	jsr     _vram_put
;
; vram_put(0x00); // Space
;
	lda     #$00
	jsr     _vram_put
;
; vram_put(0x16); // S
;
	lda     #$16
	jsr     _vram_put
;
; vram_put(0x17); // T
;
	lda     #$17
	jsr     _vram_put
;
; vram_put(0x04); // A
;
	lda     #$04
	jsr     _vram_put
;
; vram_put(0x15); // R
;
	lda     #$15
	jsr     _vram_put
;
; vram_put(0x17); // T
;
	lda     #$17
	jsr     _vram_put
;
; ppu_on_all();  // turn screen back on
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; rand(); //rand initialised
;
	jsr     _rand
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; BoxGuy1.X = 110; //player spawns in the middle of the bottom of the screen
;
	lda     #$6E
	sta     _BoxGuy1
;
; BoxGuy1.Y = 200;
;
	lda     #$C8
	sta     _BoxGuy1+1
;
; draw_bg();
;
	jsr     _draw_bg
;
; spawn_enemy_wave();
;
	jsr     _spawn_enemy_wave
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0002:	jsr     decsp1
	jsr     _ppu_wait_nmi
;
; frame_count++;  // you can add this global to track time
;
	inc     _frame_count
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	tay
L004C:	sta     (sp),y
	cmp     #$05
	jcs     L0055
;
; if (enemies[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jeq     L0007
;
; if (enemies[i].direction) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	beq     L000A
;
; enemies[i].x++; // Move right
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	tay
	txa
	adc     #>(_enemies)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if (enemies[i].x >= 240) enemies[i].direction = 0; // Change direction to left
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	cmp     #$F0
	ldx     #$00
	bcc     L0053
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$00
;
; } else {
;
	jmp     L0063
;
; enemies[i].x--; // Move left
;
L000A:	tax
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	tay
	txa
	adc     #>(_enemies)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if (enemies[i].x <= 32) enemies[i].direction = 1; // Change direction to right
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	ldx     #$00
	lda     (ptr1),y
	cmp     #$21
	bcs     L0053
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$01
L0063:	ldy     #$03
	sta     (ptr1),y
;
; if (frame_count % 60 == 0 && rand() % 10 < 2) {
;
L0053:	lda     _frame_count
	jsr     pusha0
	lda     #$3C
	jsr     tosumoda0
	cpx     #$00
	bne     L0007
	cmp     #$00
	bne     L0007
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0011
	eor     #$80
L0011:	bpl     L0007
;
; fire_enemy_missile(i);
;
	ldy     #$00
	lda     (sp),y
	jsr     _fire_enemy_missile
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0007:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L004C
;
; pad1 = pad_poll(0); // read the first controller
;
L0055:	tya
	jsr     _pad_poll
	sta     _pad1
;
; if (!player_alive) {
;
	lda     _player_alive
	bne     L0014
;
; draw_game_over();  // show GAME OVER once
;
	jsr     _draw_game_over
;
; ppu_wait_nmi();
;
L0015:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START) {
;
	and     #$10
	beq     L0015
;
; reset_game();
;
	jsr     _reset_game
;
; continue; // skip rest of the frame
;
	jsr     incsp1
	jmp     L0002
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
L0014:	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if ((pad1 & PAD_A) && missile_y == YOFFSCREEN) {
;
	lda     _pad1
	and     #$80
	beq     L0019
	lda     _missile_y
	cmp     #$F0
	bne     L0019
;
; missile_x = BoxGuy1.X + 7;
;
	lda     _BoxGuy1
	clc
	adc     #$07
	sta     _missile_x
;
; missile_y = BoxGuy1.Y - 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$08
	sta     _missile_y
;
; movement();
;
L0019:	jsr     _movement
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
	lda     #$00
	tay
L0050:	sta     (sp),y
	cmp     #$05
	jcs     L005C
;
; if (enemies[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L0025
;
; if (enemy_direction) {
;
	lda     _enemy_direction
	beq     L0024
;
; enemies[i].x += 1;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
;
; else {
;
	jmp     L004D
;
; enemies[i].x -= 1;
;
L0024:	tay
	tax
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
L004D:	sta     (ptr1),y
;
; if (enemies[i].x >= 240) {
;
L0025:	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	cmp     #$F0
	bcc     L0026
;
; enemy_direction = 0;
;
	lda     #$00
;
; else if (enemies[i].x <= 32) {
;
	jmp     L004E
L0026:	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	cmp     #$21
	bcs     L0059
;
; enemy_direction = 1;
;
	lda     #$01
L004E:	sta     _enemy_direction
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0059:	lda     #$00
	tay
L004F:	sta     (sp),y
	cmp     #$04
	bcs     L005B
;
; if (enemyMissiles[i].active) {
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	beq     L002B
;
; enemyMissiles[i].y += 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (enemyMissiles[i].y > 240) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$F1
	bcc     L002B
;
; enemyMissiles[i].active = 0; // turn off if offscreen
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L002B:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L004F
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L005B:	clc
	lda     #$01
	adc     (sp),y
	jmp     L0050
;
; if (missile_y != YOFFSCREEN) {
;
L005C:	lda     _missile_y
	cmp     #$F0
	beq     L005D
;
; missile_y += MISSILE_SPEED;  // move up
;
	lda     #$FC
	clc
	adc     _missile_y
	sta     _missile_y
;
; if (missile_y < 8) missile_y = YOFFSCREEN;  // if off screen, deactivate
;
	cmp     #$08
	bcs     L005D
	lda     #$F0
	sta     _missile_y
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L005D:	lda     #$00
L0051:	sta     (sp),y
	cmp     #$05
	jcs     L0060
;
; if (enemies[i].active &&
;
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jeq     L0033
;
; missile_y != YOFFSCREEN &&
;
	lda     _missile_y
	cmp     #$F0
	jeq     L0033
;
; missile_x + 8 > enemies[i].x &&
;
	ldx     #$00
	lda     _missile_x
	clc
	adc     #$08
	bcc     L0037
	inx
L0037:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	jsr     tosicmp0
	jmi     L0033
	jeq     L0033
;
; missile_x < enemies[i].x + 16 &&
;
	lda     _missile_x
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$10
	bcc     L0038
	inx
L0038:	jsr     tosicmp
	jpl     L0033
;
; missile_y + 8 > enemies[i].y &&
;
	ldx     #$00
	lda     _missile_y
	clc
	adc     #$08
	bcc     L0039
	inx
L0039:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	jsr     tosicmp0
	bmi     L0033
	beq     L0033
;
; missile_y < enemies[i].y + 16) {
;
	lda     _missile_y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	dey
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$10
	bcc     L003A
	inx
L003A:	jsr     tosicmp
	bpl     L0033
;
; enemies[i].active = 0;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; missile_y = YOFFSCREEN;
;
	lda     #$F0
	sta     _missile_y
;
; effect_x = enemies[i].x;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #<(_enemies)
	lda     (ptr1),y
	sta     _effect_x
;
; effect_y = enemies[i].y;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _effect_y
;
; effect_timer = 30; // Enemy explosion timer
;
	lda     #$1E
	sta     _effect_timer
;
; for (i = 0; i < MAX_ENEMIES; ++i) {
;
L0033:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0051
;
; if (effect_timer > 0) {
;
L0060:	lda     _effect_timer
	beq     L003D
;
; --effect_timer;
;
	dec     _effect_timer
;
; if (player_alive) {
;
L003D:	lda     _player_alive
	jeq     L0040
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
	lda     #$00
L0052:	sta     (sp),y
	cmp     #$04
	jcs     L0040
;
; if (enemyMissiles[i].active &&
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jeq     L0041
;
; BoxGuy1.X + 12 > enemyMissiles[i].x &&
;
	ldx     #$00
	lda     _BoxGuy1
	clc
	adc     #$0C
	bcc     L0045
	inx
L0045:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #<(_enemyMissiles)
	lda     (ptr1),y
	jsr     tosicmp0
	jmi     L0041
	jeq     L0041
;
; BoxGuy1.X < enemyMissiles[i].x + 8 &&
;
	lda     _BoxGuy1
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	jsr     mulax3
	sta     ptr1
	txa
	clc
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	ldy     #<(_enemyMissiles)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L0046
	inx
L0046:	jsr     tosicmp
	jpl     L0041
;
; BoxGuy1.Y + 12 > enemyMissiles[i].y &&
;
	ldx     #$00
	lda     _BoxGuy1+1
	clc
	adc     #$0C
	bcc     L0047
	inx
L0047:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	jsr     tosicmp0
	bmi     L0041
	beq     L0041
;
; BoxGuy1.Y < enemyMissiles[i].y + 8) {
;
	lda     _BoxGuy1+1
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	dey
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L0048
	inx
L0048:	jsr     tosicmp
	bpl     L0041
;
; player_alive = 0;  // Player is "dead"
;
	lda     #$00
	sta     _player_alive
;
; enemyMissiles[i].active = 0;  // Remove the missile
;
	tax
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     #<(_enemyMissiles)
	sta     ptr1
	txa
	adc     #>(_enemyMissiles)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; effect_x = BoxGuy1.X;  // Explosion at player position
;
	lda     _BoxGuy1
	sta     _effect_x
;
; effect_y = BoxGuy1.Y;  // Explosion at player position
;
	lda     _BoxGuy1+1
	sta     _effect_y
;
; effect_timer = 5;  // Player explosion timer
;
	lda     #$05
	sta     _effect_timer
;
; for (i = 0; i < MAX_ENEMY_MISSILES; ++i) {
;
L0041:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0052
;
; draw_sprites();
;
L0040:	jsr     _draw_sprites
;
; check_start();
;
	jsr     _check_start
;
; }
;
	jsr     incsp1
;
; while (1){
;
	jmp     L0002

.endproc

